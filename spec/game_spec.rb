require 'spec_helper'
require 'codebreaker/game'

describe Codebreaker::Game do
  Game = Codebreaker::Game

  it "requires 2 arguments for constructor" do
    expect { Game.new(double.as_null_object, double) }.not_to raise_error
  end

  it "throws ArgumentError if other number of arguments provided" do
    expect { Game.new }.to raise_error ArgumentError
    expect { Game.new(double) }.to raise_error ArgumentError
    expect { Game.new(double, double, double) }.to raise_error ArgumentError
  end

  context "when valid arguments supplied" do
    let(:validator) { double :validator }
    let(:randomizer) { double :randomizer }

    before :each do
      randomizer.stub(:generate).and_return "1234", "2516" 
      validator.stub :validate!
    end

    subject(:game) { Game.new(randomizer, validator) }

    it "uses randomizer for generating the code" do
      randomizer.should_receive(:generate)
      Game.new(randomizer, validator)
    end

    it "chooses number generated by randomizer" do
      expect(game.chosen.value).to eq "1234"
    end

    it "generates other code after reset" do
      expect { game.reset }.to change { game.chosen.value }.from("1234").to("2516")
    end

    it "has 4 attempts left by default" do
      expect(game.attempts_left).to eq 4
    end

    it "reverts attempts_left to 4 after reset" do
      game.guess "1234"
      expect { game.reset }.to change { game.attempts_left }.from(3).to(4)
    end

    it "uses validator when guessing" do
      validator.should_receive(:validate!).with "5555"
      game.guess "5555"
    end

    it "decreases attempts after each guess" do
      game.attempts_left.times do
        expect { game.guess "5555" }.to change { game.attempts_left }.by(-1)
      end
    end

    context "when no attempts left" do
      before do
        game.guess("1111") while game.attempts_left > 0
      end

      it "has zero attempt count" do
        expect(game.attempts_left).to eq 0
      end

      it "raises error after extra guess" do
        expect { game.guess "5555" }.to raise_error Game::ERR_IS_OVER
      end
    end
  end
end
