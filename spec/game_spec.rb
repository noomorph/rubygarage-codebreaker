require 'spec_helper'
require 'codebreaker/game'

describe Game do

  context "when created with invalid arguments" do
    it "requires randomizer as constructor argument" do
      expect { Game.new }.to raise_error ArgumentError
    end

    it "requires validator as constructor argument" do
      expect { Game.new(nil) }.to raise_error ArgumentError
    end
  end

  context "when valid arguments supplied" do
    let(:validator) { double :validator }
    let(:randomizer) { double :randomizer }

    it "uses randomizer for generating the code" do
      randomizer.should_receive(:generate)
      Game.new(randomizer, validator)
    end

    context "when reseting game" do
      before(:each) { randomizer.stub(:generate).and_return "1234", "2516" }
      subject(:game) { Game.new(randomizer, validator) }

      it "should change chosen code after reset" do
        expect { game.reset }.to change { game.chosen.value }.from("1234").to("2516")
      end

      it "should revert attempts count to 4 after reset" do
        validator.stub :validate!
        game.guess "1234"
        expect { game.reset }.to change { game.attempts_left }.from(3).to(4)
      end
    end

    context "when random() = '1234'" do
      before(:each) { randomizer.stub(:generate).and_return "1234" }
      subject(:game) { Game.new(randomizer, validator) }

      it "chooses number generated by randomizer" do
        expect(game.chosen.value).to eq "1234"
      end

      it "has 4 attempts left by default" do
        expect(game.attempts_left).to eq 4
      end

      it "uses validator when guessing" do
        validator.should_receive(:validate!).with "5555"
        game.guess "5555"
      end

      context "when guess is valid" do
        before(:each) { validator.stub :validate! }

        it "decreases attempts after each guess" do
          game.attempts_left.times do
            expect { game.guess "5555" }.to change { game.attempts_left }.by(-1)
          end
        end

        context "when no attempts left" do
          before(:each) { game.attempts_left.times { game.guess("5555") } }

          it "has zero attempt count" do
            expect(game.attempts_left).to eq 0
          end

          it "does not decrease attempts count" do
            expect { game.guess "5555" }.not_to change { game.attempts_left }
          end
        end

      end

    end

  end
end
